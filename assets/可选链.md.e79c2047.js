import{_ as s,c as a,o as n,a as e}from"./app.4a2ec065.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"可选链.md"}'),o={name:"可选链.md"},c=e(`<h4 id="可选链" tabindex="-1">可选链(？.) <a class="header-anchor" href="#可选链" aria-hidden="true">#</a></h4><p>如果对象obj不存在属性c，则obj.c返回undefined。而如果继续对obj.c读取属性，例如obj.c.d，则此时会报错，使用EcmaScript 2020新增的可选链(?.)特性， 可以解决这个报错的问题。如下示例：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const obj = {a:1,b:2}</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(obj.c)  // undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(obj.c.d)  // 报错，因为obj.c为undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(obj?.c?.d)  // 存在属性则返回，不存在则会返回undefined，而不会报错 </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>可选链加强了程序的健壮性，无需开发者手动处理潜在的报错问题。</p>`,4),t=[c];function l(p,d,i,r,_,b){return n(),a("div",null,t)}const u=s(o,[["render",l]]);export{C as __pageData,u as default};
