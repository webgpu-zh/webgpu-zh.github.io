import{_ as s,c as a,o as n,a as e}from"./app.4a2ec065.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"参数收集和参数扩展.md"}'),p={name:"参数收集和参数扩展.md"},l=e(`<h4 id="参数收集和参数扩展" tabindex="-1">参数收集和参数扩展 <a class="header-anchor" href="#参数收集和参数扩展" aria-hidden="true">#</a></h4><p>定义函数时，如果不确定参数的个数，可以进行参数收集。参数收集的意思是只定义一个参数列表，未来传递实参时，无论参数有多少个，都会作为一个数组传递进来。这样我们就解决了参数个数不确定的问题，例如定义一个求和函数：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">function  sum(...values){</span></span>
<span class="line"><span style="color:#A6ACCD;">     const result=  values.reduce((prev,cur)=&gt;prev+cur)</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(result)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这里将参数打包成一个数组，函数只针对数组进行处理，规避了参数个数不确定的问题。调用函数时，使用sum(1,2)或者sum(1,2,3,4)都是能进行求和的，因为总是会打包成一个数组处理：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">[1,2].reduce((prev,cur)=&gt;prev+cur)</span></span>
<span class="line"><span style="color:#A6ACCD;">[1,2,3,4].reduce((prev,cur)=&gt;prev+cur)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>现在，假设有一个现成的数组：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const arr=[1,2,3,4]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>我们想调用上面定义的sum()函数对其元素进行求和，我们就需要先将这些元素一一取出，再依次传参，就像这样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sum(arr[0],arr[1],arr[2],arr[3])</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这无疑是麻烦的，使用扩展操作符，可以自动将数组解包：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sum(...arr)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这一行将会被解析为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sum(1,2,3,4)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这就是参数扩展。 另外，请注意，大家可能会跟上面的参数收集搞混，认为直接传数组是可以的，实际上，如果直接传递数组sum(arr)，那么函数体中就会是这样的操作：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">[[1,2,3,4]].reduce((prev,cur)=&gt;prev+cur)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这是无法求出结果的。</p><p>可以看到，参数收集和参数扩展分别用于函数定义和函数调用。一个将形参列表打包，一个用于实参的快速解包。</p>`,17),t=[l];function c(o,r,i,d,u,C){return n(),a("div",null,t)}const g=s(p,[["render",c]]);export{_ as __pageData,g as default};
