import{_ as n,c as s,o as e,a}from"./app.4a2ec065.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"数组的find.md"}'),t={name:"数组的find.md"},o=a(`<h4 id="find-、findeindex" tabindex="-1">find() 、findeIndex() <a class="header-anchor" href="#find-、findeindex" aria-hidden="true">#</a></h4><p>上面的查找方法只能查看是否包含特定的元素，如果要查找符合某些要求的元素，则需要使用Array.prototype.find()和Array.prototype.findIndex()方法。find()方法返回第一个匹配的元素，findIndex()方法返回第一个匹配的元素的索引位置。 这两个方法都接收一个callback函数，该函数接收三个参数：元素、索引位置、数组本身。例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const arr = [1, 2, 3, 4, 5, 6 ] </span></span>
<span class="line"><span style="color:#A6ACCD;">const result1 = arr.find(item =&gt; item%2==0)  // 返回第一个偶数</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(result1)  // 2</span></span>
<span class="line"><span style="color:#A6ACCD;">const result2 = arr.findIndex(item =&gt; item%2==0)  // 返回第一个偶数的索引位置 </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(result2)  // 1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>find()和findIndex()在找到第一个匹配的元素之后就不再往后迭代，因此，倘若要找到全部匹配的元素，则应该使用filter()方法。</p>`,4),i=[o];function l(p,r,c,d,_,f){return e(),s("div",null,i)}const h=n(t,[["render",l]]);export{C as __pageData,h as default};
