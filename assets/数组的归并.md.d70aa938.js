import{_ as e,c as a,o as s,a as r}from"./app.4a2ec065.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"数组的归并.md"}'),n={name:"数组的归并.md"},t=r(`<h4 id="数组的归并" tabindex="-1">数组的归并 <a class="header-anchor" href="#数组的归并" aria-hidden="true">#</a></h4><p>归并操作是对数组的元素进行叠加运算，例如累加或累积，涉及reduce()和reduceRight()，这两个方法的区别只是叠加运算的方向相反。 reduce()方法接收一个函数参数，这个函数与前面的函数参数有所不同，它期待4个参数：</p><ul><li>prev：叠加运算的初始值，默认为第一项</li><li>cur：迭代的当前元素，第一次迭代为第二项</li><li>index：索引位置</li><li>array：数组本身 来看下面的示例：数组累加求和。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const arr = [1, 2, 3, 4]</span></span>
<span class="line"><span style="color:#A6ACCD;">const result = arr.reduce( (prev, cur)=&gt; prev + cur )</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(result)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>该归并操作的细分步骤如下： 第一次归并：prev=1，cur=2 第二次归并：prev = prev+cur=1+2=3，cur = 3 第三次归并：prev=prev+cur=3+3=6 ，cur=4 第四次归并：prev=prev+cur=6+4=10</p>`,5),c=[t];function l(p,o,i,_,d,u){return s(),a("div",null,c)}const C=e(n,[["render",l]]);export{v as __pageData,C as default};
