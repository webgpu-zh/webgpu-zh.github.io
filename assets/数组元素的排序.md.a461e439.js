import{_ as s,c as a,o as n,a as l}from"./app.4a2ec065.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"数组元素的排序.md"}'),e={name:"数组元素的排序.md"},p=l(`<h4 id="数组元素的排序" tabindex="-1">数组元素的排序 <a class="header-anchor" href="#数组元素的排序" aria-hidden="true">#</a></h4><p>对数组排序要用到两个函数：.sort()和reverse()，这两个函数本质一样，只是一个正序一个倒序。sort()函数接收一个callback函数作为参数，该函数只需要给出谁大谁小的定义逻辑即可，该函数接收两个值，需要返回正数、0、负数表示排序谁排在前面。这两个函数都会直接修改原数组。</p><p>需要特别提醒的是，如果不给sort()传入排序函数，sort()会按照字符串的形式升序排序，哪怕所有元素都是数字，例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const arr = [1,3,11,222,2]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr.sort() )</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log( arr )    //=&gt; [1,11,2,222,3]，这显然不符合我们的预期</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>来继续看下面几个例子。 对元素均为字符串的数组进行升序排序：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const arr = [&#39;zhang san&#39;, &#39;li si&#39;, &#39;wang wu&#39;,&#39;zhao liu&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr.sort( )  </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr)         // =&gt; [&#39;li si&#39;, &#39;wang wu&#39;, &#39;zhang san&#39;, &#39;zhao liu&#39;] ，默认会按照元素的字符进行排序</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>对元素均为数值的数组进行排序，默认为升序：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const arr = [1,3,11,222,2]   </span></span>
<span class="line"><span style="color:#A6ACCD;">arr.sort( (value1,value2)=&gt;value1-value2 )  </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr)  //=&gt; [ 1, 2, 3, 11, 222 ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这个例子让参数作减法，返回正数、负数以决定排序逻辑。</p><p>在实际应用中，并不是都只对数值或字符串进行排序，比如下面这个例子，无论是什么数组，都应该按照赵、钱、孙、李、周、吴、郑、王的顺序排列：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const str = &quot;赵、钱、孙、李、周、吴、郑、王&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">const standard = str.split(&#39;、&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">const arr = [&#39;王&#39; , &#39;李&#39; ,&#39;周&#39;, &#39;赵&#39; ,&#39;吴&#39;,&#39;钱&#39;,&#39;郑&#39;,&#39;孙&#39; ]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr.sort ( (value1,value2) =&gt; standard.indexOf(value1)-standard.indexOf(value2)) </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这个例子使用了数组的indexOf()方法，通过在标准数组中查询索引，再将索引作减法，以确定谁排在前面。</p>`,12),t=[p];function o(c,r,i,d,C,A){return n(),a("div",null,t)}const g=s(e,[["render",o]]);export{u as __pageData,g as default};
