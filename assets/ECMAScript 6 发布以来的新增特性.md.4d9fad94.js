import{_ as a,c as t,o as e,a as r}from"./app.4a2ec065.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ECMAScript 6 发布以来的新增特性.md"}'),i={name:"ECMAScript 6 发布以来的新增特性.md"},p=r('<h4 id="ecmascript-6-发布以来的新增特性" tabindex="-1">ECMAScript 6 发布以来的新增特性 <a class="header-anchor" href="#ecmascript-6-发布以来的新增特性" aria-hidden="true">#</a></h4><p>ECMAScript 标准自2015年以来每年6月会发布一个新版本。ECMAScript 的某个特性从想法到最终的标准一般会经历stage0——stage4 五个阶段，分别是：strawman（最初想法）、proposal（提案）、draft（草案）、candidate（候选）、finished（完成）。一般而言，一个提案一旦进入草案阶段就很有可能会纳入最终的标准。</p><p>在以前，从标准的发布到浏览器厂商的支持又会经历很长的时间，这时可以使用polyfill框架用于实现浏览器暂不支持的特性。不过现在这种情况已经得到了好转，甚至对于很多特性，往往是浏览器厂商率先推出，而后TC39委员会将其作为标准纳入。</p><p>下面列出了自ECMAScript 2015 发布以来的新增特性：</p><ul><li><p>ES6：发行于2015年6月，新增了许多影响深远的特性：箭头函数、模块、迭代器、生成器、期约、反射、代理。ES6的发布对于JavaScript来说是一个里程碑事件，这是经典JavaScript和现代JavaScript的分水岭，奠定了JavaScript繁荣的基础。之后的ES版本也可以统称为“ES6”。</p></li><li><p>ES7：发布于2016年6月，新增了指数操作符。</p></li><li><p>ES8：发布于2017年6月，async/await、Object.values()/keys()/entries()、对象字面量拖尾逗号。async和await又是现代JavaScript发展史上另外一个极其重要的特性。</p></li><li><p>ES9：发布于2018年6月，新增了Promise finally()、异步迭代、剩余和扩展属性。</p></li><li><p>ES10：发布于2019年6月，新增了数组打平、字符串定长填充等特性。</p></li><li><p>ES11：发布于2020年6月，新增了可选链、空位合并等特性。</p></li><li><p>ES12：发布于2021年6月，新增了Promise any()、String.prototype.replaceAll()等特性。</p></li><li><p>ES13：发布于2022年6月，新增了顶层await、<a href="http://Array.prototype.at" target="_blank" rel="noreferrer">Array.prototype.at</a>()、class私有方法 / 静态方法等特性。</p></li></ul>',5),c=[p];function l(s,_,o,n,S,d){return e(),t("div",null,c)}const h=a(i,[["render",l]]);export{f as __pageData,h as default};
